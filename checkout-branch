#!/bin/bash

# Functions
function appendPeriods 
{
   baseString="$1"
   BASE_COUNT=50;
   counter=`expr $BASE_COUNT - ${#baseString}`
   
   while [ $counter -gt 0 ]; do
      result="$result."
      let counter-=1
   done
   echo "$result"
}

function printHelp
{
   printf "\nusage: -h -b branch [[path | p] path ] -u -v\n"
   printf "\nArguments:\n"
   printf "'-'p or '--'path (with path name)       Gets all repo names for supplied paths child directories\n"
   printf "'-'b (with branch name)                 Supplies the branch to change all repos too.\n"
   printf "'-'u                                    Updates repos by performing a pull\n"
   printf "'-'v                                    Verbose ouput, shows additional git info\n"
   printf "'-'h or '--'help                        Print Help (this message) and exit\n"
}

# Set default path, then get path, if povided
path=$(pwd) 
pull=false
verbose="-q"

while [[ $# > 0 ]]
do
key="$1"

case $key in
  -h)
      printHelp
      exit 1
      ;;
  --help)
      printHelp
      exit 1
      ;;
  --path)
    path="$2"
    shift
    ;;
  -p)
   path="$2"
   shift
   ;;
  -b)
   # Branch 
   branch="$2"
   shift
   ;;
  -u)
   # Pull
   pull=true
   ;;
  -v)
   # Verbose
    verbose=""
   ;;
  *)
    # unknown option
    path="."
    ;;
esac
shift
done

# Branch is required
if [ -z "$branch" ]; then
   printf "\033[0;31mError: Branch is required.\033[0m\n"
   exit 1
fi

path="$path/*"

# Loop through all immidiate child directories
for dir in $path ; do
   if [ -d "$dir" ] && [ -x "$dir" ]; then
      pullMessage=""
      cd $dir
      currentBranch="$(git branch |grep \* | cut -b 3-10000)"
      if [ "$currentBranch" == "$branch" ];then
         message="\033[0;32mAlready on $branch\033[0m";
         if [ "$pull" = true ]; then
            pullMessage=" (Git: Pulled)"
            git pull $verbose
         fi
      else
         git checkout "$branch" -q 2>/dev/null
         currentBranch="$(git branch |grep \* | cut -b 3-10000)"
        if [ "$currentBranch" == "$branch" ];then
           message="\033[0;33mChanged to $branch\033[0m"
           if [ "$pull" = true ]; then
              pullMessage=" (Git: Pulled)"
              git pull $verbose
           fi
        else
           message="\033[0;31mError: Could not change to $branch\033[0m"
        fi
      fi

      # Clean up message and print
      module=${PWD##*/}
      spacer=$(appendPeriods $module)
      printf "$module$spacer$message$pullMessage\n"
      cd ..
   fi
done

